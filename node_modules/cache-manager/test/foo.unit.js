'use strict';
/*jshint esversion:6*/
const manager = require('..');

let cache = manager.multiCaching([
    manager.caching({
        ttl: 3000,
        store: 'memory',
    }),
    manager.caching({
        ttl: 3000,
        store: 'memory',
    })],
    {
        isCacheableValue: value => {
            console.log("\nHERE:");
            return true;
        }
    }
);

const key1 = 'key1';
const key2 = 'key2';

const getData = fn => setTimeout(() => fn(null, 'SOME_DATA'), 1000);
const getEmpty = fn => setTimeout(() => fn(null), 1000);

/*
cache.wrap(key2, getData, (err, data) => {
    console.log(`RETURN FROM WRAP WITH DATA ${key1} (1)`, err, data);
});

cache.wrap(key2, getData, (err, data) => {
    console.log(`RETURN FROM WRAP WITH DATA ${key2} (2)`, err, data);
});
*/

cache.wrap(key1, getEmpty, (err, data) => {
    console.log(`RETURN FROM (multi) WRAP WITHOUT DATA ${key1} (1)`, err, data);
});

cache.wrap(key1, getEmpty, (err, data) => {
    console.log(`RETURN FROM (multi) WRAP WITHOUT DATA ${key1} (2)`, err, data);
});

console.log("NEXT...");

cache = manager.caching({
    ttl: 3000,
    store: 'memory',
});

/*
cache.wrap(key2, getData, (err, data) => {
    console.log(`RETURN FROM WRAP WITH DATA ${key1} (1)`, err, data);
});

cache.wrap(key2, getData, (err, data) => {
    console.log(`RETURN FROM WRAP WITH DATA ${key2} (2)`, err, data);
});
*/

cache.wrap(key1, getEmpty, (err, data) => {
    console.log(`RETURN FROM WRAP WITHOUT DATA ${key1} (1)`, err, data);
});

cache.wrap(key1, getEmpty, (err, data) => {
    console.log(`RETURN FROM WRAP WITHOUT DATA ${key1} (2)`, err, data);
});
